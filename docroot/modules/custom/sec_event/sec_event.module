<?php

/**
 * @file
 * Contains sec_event.module.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_FORM_ID_alter() for the FORM_ID() form.
 */
function sec_event_form_node_event_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'sec_event_form_node_event_validate';
  sec_event_form_setup($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter() for the FORM_ID() form.
 */
function sec_event_form_node_event_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'sec_event_form_node_event_validate';
  sec_event_form_setup($form, $form_state);
}

/**
 * Setup the form
 */
function sec_event_form_setup(&$form, FormStateInterface $form_state) {
  $form['#attached']['library'][] = 'sec_event/sec_event';
  $form['#attached']['library'][] = 'single_datetime/datetimepicker';
  $form['#attributes']['autocomplete'] = 'off';
}

/**
 * Validates submission values in the FORM_ID() form.
 */
function sec_event_form_node_event_validate(array &$form, FormStateInterface $form_state) {
  //When event type is training or general, location of session should be required
  $fieldEventType = $form_state->getValue('field_event_type');

  //check each session for location
  foreach ($form_state->getStorage()['field_storage']['#parents']['#fields']['field_session']['paragraphs'] as $key => $violation) {
    if ($fieldEventType[0]['value'] == 'general' || $fieldEventType[0]['value'] == 'training') {
      if (empty($violation['entity']->get('field_start_date')->getValue())) {
        $form_state->setErrorByName('field_session][' . $key . '][subform][field_start_date][0][value', t("Please enter a start date."));
      }

      if (empty($violation['entity']->get('field_location')->getValue())) {
        $form_state->setErrorByName('field_session][' . $key . '][subform][field_location][0][value', t("Please enter a session location."));
      }


      if (!empty($violation['entity']->get('field_end_date')->getValue()) && ($violation['entity']->get('field_start_date')->getValue() > $violation['entity']->get('field_end_date')->getValue())) {
        $form_state->setErrorByName('field_session][' . $key . '][subform][field_start_date][0][value', t("Start date cannot occur after the end date."));
      }
    } else {
      if (empty($violation['entity']->get('field_end_date')->getValue())) {
        $form_state->setErrorByName('field_session][' . $key . '][subform][field_end_date][0][value', t("Please enter a deadline date."));
      }
    }
  }
}

/**
 * Implements HOOK_form_alter() to add after_build callback which removes onfocus attribute from single_datetime views filters DI-4468
 */
function sec_event_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'views_exposed_form') {
    // Check if these date fields exists
    $fields = array('field_start_date_value', 'field_start_date_value_1', 'field_end_date_value', 'field_end_date_value_1');

    foreach ($fields as $field) {
      if (!empty($form[$field])) {
        $form['#after_build'][] = 'sec_event_single_datetime_after_build';
        break;
      }
    }
  }
}

/**
 * Removes onfocus attribute from exposed datetime views filters DI-4468
 */
function sec_event_single_datetime_after_build($form, FormStateInterface $form_state) {
  // Check if these date fields exists
  $fields = array('field_start_date_value', 'field_start_date_value_1', 'field_end_date_value', 'field_end_date_value_1');

  foreach ($fields as $field) {
    if (!empty($form[$field]['#attributes']['onfocus'])) {
      unset($form[$field]['#attributes']['onfocus']);
    }
  }

  return $form;
}
