diff --git a/config/schema/masquerade.schema.yml b/config/schema/masquerade.schema.yml
new file mode 100644
index 00000000..c0978f55
--- /dev/null
+++ b/config/schema/masquerade.schema.yml
@@ -0,0 +1,7 @@
+block.settings.masquerade:
+  type: block_settings
+  label: 'Masquerade'
+  mapping:
+    show_unmasquerade_link:
+      type: boolean
+      label: 'Show unmasquerade link in block'
diff --git a/src/Plugin/Block/MasqueradeBlock.php b/src/Plugin/Block/MasqueradeBlock.php
index 7ae0601b..a21eb538 100644
--- a/src/Plugin/Block/MasqueradeBlock.php
+++ b/src/Plugin/Block/MasqueradeBlock.php
@@ -8,9 +8,12 @@
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\masquerade\Form\MasqueradeForm;
 use Drupal\masquerade\Masquerade;
 use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\Core\Url;
+use Drupal\Core\Form\FormStateInterface;

 /**
  * Provides a 'Masquerade' block.
@@ -37,6 +40,13 @@ class MasqueradeBlock extends BlockBase implements ContainerFactoryPluginInterfa
    */
   protected $masquerade;

+  /**
+   * The current user.
+   *
+   * @var \Drupal\Core\Session\AccountProxyInterface
+   */
+  protected $currentUser;
+
   /**
    * Constructs a new MasqueradeBlock object.
    *
@@ -50,12 +60,15 @@ class MasqueradeBlock extends BlockBase implements ContainerFactoryPluginInterfa
    *   The form builder service.
    * @param \Drupal\masquerade\Masquerade $masquerade
    *   The masquerade service.
+   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   *   The current user.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, FormBuilderInterface $form_builder, Masquerade $masquerade) {
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, FormBuilderInterface $form_builder, Masquerade $masquerade, AccountProxyInterface $current_user) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);

     $this->formBuilder = $form_builder;
     $this->masquerade = $masquerade;
+    $this->currentUser = $current_user;
   }

   /**
@@ -67,10 +80,35 @@ public static function create(ContainerInterface $container, array $configuratio
       $plugin_id,
       $plugin_definition,
       $container->get('form_builder'),
-      $container->get('masquerade')
+      $container->get('masquerade'),
+      $container->get('current_user')
     );
   }

+  /**
+   * {@inheritdoc}
+   */
+  public function blockForm($form, FormStateInterface $form_state) {
+    $form = parent::blockForm($form, $form_state);
+    $config = $this->getConfiguration();
+    $form['show_unmasquerade_link'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Show unmasquerade link in block'),
+      '#description' => $this->t('If checked, this block will show a "Switch back" link when the user is masquerading.'),
+      '#default_value' => isset($config['show_unmasquerade_link']) ? $config['show_unmasquerade_link'] : '',
+    ];
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function blockSubmit($form, FormStateInterface $form_state) {
+    parent::blockSubmit($form, $form_state);
+    $values = $form_state->getValues();
+    $this->configuration['show_unmasquerade_link'] = $values['show_unmasquerade_link'];
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -80,8 +118,14 @@ protected function blockAccess(AccountInterface $account) {
       return AccessResult::forbidden();
     }
     if ($this->masquerade->isMasquerading()) {
-      return AccessResult::forbidden()
-        ->addCacheContexts(['session.is_masquerading']);
+      $config = $this->getConfiguration();
+      if (empty($config['show_unmasquerade_link'])) {
+        $access = AccessResult::forbidden();
+      }
+      else {
+        $access = AccessResult::allowed();
+      }
+      return $access->addCacheContexts(['session.is_masquerading']);
     }
     // Display block for all users that has any of masquerade permissions.
     return AccessResult::allowedIfHasPermissions($account, $this->masquerade->getPermissions(), 'OR')
@@ -99,6 +143,18 @@ public function getCacheContexts() {
    * {@inheritdoc}
    */
   public function build() {
+    if ($this->masquerade->isMasquerading()) {
+      $config = $this->getConfiguration();
+      if (empty($config['show_unmasquerade_link'])) {
+        return [];
+      }
+      $url = Url::fromRoute('masquerade.unmasquerade')->toString();
+      return [
+        '#type' => 'markup',
+        '#markup' => $this->t('You are masquerading as %name. <a href="@url">Switch back</a>.', ['%name' => $this->currentUser->getDisplayName(), '@url' => $url]),
+        '#cache' => ['contexts' => ['session']],
+      ];
+    }
     return $this->formBuilder->getForm(MasqueradeForm::class);
   }
