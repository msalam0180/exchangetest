diff --git a/src/Form/MasqueradeForm.php b/src/Form/MasqueradeForm.php
index 0b8d265..b37c0ae 100644
--- a/src/Form/MasqueradeForm.php
+++ b/src/Form/MasqueradeForm.php
@@ -6,6 +6,7 @@ use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\masquerade\Masquerade;
+use Drupal\masquerade\MasqueradePermissions;
 use Symfony\Component\DependencyInjection\ContainerInterface;

 /**
@@ -35,7 +36,10 @@ class MasqueradeForm extends FormBase {
    * @param \Drupal\masquerade\Masquerade $masquerade
    *   The masquerade service.
    */
-  public function __construct(EntityTypeManagerInterface $etm, Masquerade $masquerade) {
+  public function __construct(
+    EntityTypeManagerInterface $etm,
+    Masquerade $masquerade
+  ) {
     $this->entityTypeManager = $etm;
     $this->masquerade = $masquerade;
   }
@@ -62,37 +66,68 @@ class MasqueradeForm extends FormBase {
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form['autocomplete'] = [
-      '#type' => 'container',
+      '#type'       => 'container',
       '#attributes' => ['class' => ['container-inline']],
     ];
     $form['autocomplete']['masquerade_as'] = [
-      '#type' => 'entity_autocomplete',
-      '#target_type' => 'user',
+      '#type'               => 'entity_autocomplete',
+      '#target_type'        => 'user',
       '#selection_settings' => [
         'include_anonymous' => FALSE,
-        'match_operator' => 'STARTS_WITH',
+        'match_operator'    => 'STARTS_WITH',
+        'filter'            => [
+          'type' => 'role',
+          'role' => $this->roleFilters(),
+        ],
       ],
-      '#title' => $this->t('Username'),
-      '#title_display' => 'invisible',
-      '#required' => TRUE,
-      '#placeholder' => $this->t('Masquerade asâ€¦'),
-      '#size' => '18',
+      '#title'              => $this->t('Username'),
+      '#title_display'      => 'invisible',
+      '#required'           => TRUE,
+      '#placeholder'        => $this->t('Masquerade asâ€¦'),
+      '#size'               => '18',
     ];
     $form['autocomplete']['actions'] = ['#type' => 'actions'];
     $form['autocomplete']['actions']['submit'] = [
-      '#type' => 'submit',
+      '#type'  => 'submit',
       '#value' => $this->t('Switch'),
     ];
     return $form;
   }

+  /**
+   * Returns a filtered list of roles the masquerading user is allow to use.
+   *
+   * @return array
+   */
+  public function roleFilters() {
+    // Setting up the roles to return
+    $roles = [];
+
+    // Using some of the module's permissions methods
+    $masquerade_permissions = new MasqueradePermissions();
+
+    // Grabbing the permissions generated by the MasqueradePermissions form
+    $permissions = array_keys($masquerade_permissions->permissions());
+
+    foreach ($permissions as $permission) {
+      // If our current user has permissions to to thi role
+      if (\Drupal::currentUser()->hasPermission($permission)) {
+        // Then add it to the allowed roles filter
+        $roles[] = str_replace('masquerade as ', '', $permission);
+      }
+    }
+
+    return $roles;
+  }
+
   /**
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
     $user_id = $form_state->getValue('masquerade_as');
     if (empty($user_id)) {
-      $form_state->setErrorByName('masquerade_as', $this->t('The user does not exist. Please enter a valid username.'));
+      $form_state->setErrorByName('masquerade_as',
+        $this->t('The user does not exist. Please enter a valid username.'));
       return;
     }
     $target_account = $this->entityTypeManager
