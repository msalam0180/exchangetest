{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{% if (node.field_media_id.value) %}
  {% set dataType = "inline" %}
  {% set thumbnail = file_url(node.field_limelight_thumbnail.entity.uri.value) %}
  {% set src = "#video" ~ node.id %}
  {{ attach_library("sec_video/wowza_player") }}
    <div id="video{{node.id}}" class="video-embed-field-responsive-video mfp-hide">
      <div class="videoplayer">
        <video id="wowza_player_1001" class="video-js vjs-default-skin vjs-big-play-centered vjs-fluid" controls preload="auto" data-mediaid="{{ node.field_media_id.value }}" tabindex="0"></video>
      </div>
      <div class="mfp-bottom-bar">
          <div class="mfp-title">{{ node.field_caption.value }}</div>
          <div class="mfp-counter"></div>
      </div>
    </div>
{% elseif (node.field_video.value) %}
  {% set dataType = "iframe" %}
  {% if ('vimeo' in node.field_video.value) %}
    {% set videoId = node.field_video.value|split(".com/")[1] %}
    {# See insider_gallery_slideshow.module preprocess hook which stores vimeo thumbnail in limelight thumbnail field #}
    {% set thumbnail = file_url(node.field_limelight_thumbnail.value) %}
  {% else %}
    {% set videoId = node.field_video.value|split("=")[1] %}
    {% set thumbnail = "https://i.ytimg.com/vi/"~videoId~"/hqdefault.jpg"  %}
  {% endif %}


  {% set src = node.field_video.value %}

{% endif %}

<!-- -------------------------- BOX MARKUP -------------------------- -->
<div class="media-box video">
  <div class="media-box-content">
    <div class="media-box-title">{{ node.title.value }}</div>
  </div>

  <button
    class="media-box-image mb-open-popup"
    data-src="{{ src }}"
    data-title="<span class='titleText'>{{ node.field_caption.value }}</span> {{ node.field_transcript.value ? "<a class='transcript-link button' href='/node/" ~ node.id ~ "/'>Link to Transcript</a>" : "" }} "
    data-alt="{{ node.title.value }}"
    data-type="{{dataType}}"
  >
    <div
      data-height="270"
      data-thumbnail="{{thumbnail}}"
      data-title="{{ node.field_caption.value }}"
      data-width="480"
      data-alt="{{ node.title.value }}"
    >
    </div>

    <div class="thumbnail-overlay"></div>
  </button>
  {% if (node.field_caption.value) %}
  <div class="media-box-footer">{{node.field_caption.value}}</div>
  {% endif %}
</div>
